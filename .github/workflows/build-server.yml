name: Build and Package

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Create Installer
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
      
      - name: Update dependencies
        run: |
          cd MediaManagerServer
          go mod tidy
          go get github.com/u2takey/ffmpeg-go
      
      - name: Build application
        run: |
          cd MediaManagerServer
          mkdir -p ../dist
          go build -v -o ../dist/mediamanager.exe ./cmd/ffmpeg/
      
      - name: Download FFmpeg
        run: |
          mkdir -p dist/bin
          curl -L https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip -o ffmpeg.zip
          7z x ffmpeg.zip -odist/
          $ffmpegDir = Get-ChildItem -Path dist -Directory | Where-Object { $_.Name -like "ffmpeg-*" } | Select-Object -First 1
          if ($ffmpegDir) {
            Move-Item -Path "$($ffmpegDir.FullName)/bin/ffmpeg.exe" -Destination dist/bin/ -Force
            Move-Item -Path "$($ffmpegDir.FullName)/bin/ffprobe.exe" -Destination dist/bin/ -Force
            Remove-Item -Path "$($ffmpegDir.FullName)" -Recurse -Force
          } else {
            echo "Error: Could not find FFmpeg directory in extracted files"
            exit 1
          }
      
      - name: Create application folders
        run: |
          mkdir -p dist/database/data
          mkdir -p dist/database/migrations
          Copy-Item -Path MediaManagerServer/database/migrations/*.sql -Destination dist/database/migrations/ -ErrorAction SilentlyContinue
          Copy-Item -Path MediaManagerServer/database/sqlc.yaml -Destination dist/database/ -ErrorAction SilentlyContinue
          Copy-Item -Path MediaManagerServer/video.html -Destination dist/ -ErrorAction SilentlyContinue
      
      - name: Create Installer with InnoSetup
        run: |
          choco install innosetup -y --no-progress
          
          # Create output directory
          New-Item -Path output -ItemType Directory -Force | Out-Null
          
          # Build installer using the external script file
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss
          
          # Verify installer was created
          if (Test-Path output/MediaManagerSetup.exe) {
            echo "Installer created successfully"
          } else {
            echo "Error: Installer creation failed"
            exit 1
          }
      
      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: MediaManager-Installer
          path: output/MediaManagerSetup.exe
      
      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: output/MediaManagerSetup.exe
