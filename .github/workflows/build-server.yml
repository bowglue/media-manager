name: Build and Package

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Create Installer
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
      
      - name: Update dependencies
        run: |
          cd MediaManagerServer
          go mod tidy
          go get github.com/u2takey/ffmpeg-go
      
      - name: Build application
        run: |
          cd MediaManagerServer
          mkdir -p ../dist
          go build -v -o ../dist/mediamanager.exe ./cmd/ffmpeg/
      
      - name: Download FFmpeg
        run: |
          mkdir -p dist/bin
          curl -L https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip -o ffmpeg.zip
          7z x ffmpeg.zip -odist/
          move dist/ffmpeg-master-latest-win64-gpl/bin/ffmpeg.exe dist/bin/
          move dist/ffmpeg-master-latest-win64-gpl/bin/ffprobe.exe dist/bin/
      
      - name: Create application folders
        run: |
          mkdir -p dist/database/data
          mkdir -p dist/database/migrations
          copy MediaManagerServer/database/migrations/*.sql dist/database/migrations/ || echo "No migration files found"
          copy MediaManagerServer/database/sqlc.yaml dist/database/ || echo "No sqlc.yaml found"
          copy MediaManagerServer/video.html dist/ || echo "No video.html found"
      
      - name: Create Installer with InnoSetup
        run: |
          choco install innosetup -y
          # Create InnoSetup script
          echo '
          [Setup]
          AppName=Media Manager
          AppVersion=1.0.0
          DefaultDirName={pf}\MediaManager
          DefaultGroupName=Media Manager
          OutputDir=output
          OutputBaseFilename=MediaManagerSetup
          Compression=lzma
          SolidCompression=yes
          
          [Files]
          Source: "dist\mediamanager.exe"; DestDir: "{app}"
          Source: "dist\bin\*"; DestDir: "{app}\bin"; Flags: recursesubdirs
          Source: "dist\database\*"; DestDir: "{app}\database"; Flags: recursesubdirs
          Source: "dist\video.html"; DestDir: "{app}"
          
          [Icons]
          Name: "{group}\Media Manager"; Filename: "{app}\mediamanager.exe"
          Name: "{commondesktop}\Media Manager"; Filename: "{app}\mediamanager.exe"
          
          [Registry]
          Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "PATH"; ValueData: "{olddata};{app}\bin"; Check: NeedsAddPath(ExpandConstant(''{app}\bin''))
          
          [Code]
          function NeedsAddPath(Param: string): boolean;
          var
            OrigPath: string;
          begin
            if not RegQueryStringValue(HKLM, ''SYSTEM\CurrentControlSet\Control\Session Manager\Environment'', ''PATH'', OrigPath)
            then begin
              Result := True;
              exit;
            end;
            Result := Pos(';'' + Param + '';'', '';'' + OrigPath + '';'') = 0;
          end;
          ' > installer.iss
          
          # Build installer
          mkdir -p output
          iscc installer.iss
      
      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: MediaManager-Installer
          path: output/MediaManagerSetup.exe
      
      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: output/MediaManagerSetup.exe
