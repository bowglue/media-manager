package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"mms/modules/user-module/gql"
	"mms/modules/user-module/mapper"
	"mms/modules/user-module/validations"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, user gql.CreateUserInput) (*gql.User, error) {
	if err := validations.ValidateCreateUserInput(user); err != nil {
		return nil, err
	}

	domainUser := mapper.GQLCreateUserToDomain(&user)
	createdUser, err := r.UserService.CreateUser(ctx, domainUser)
	if err != nil {
		return nil, err
	}
	return mapper.DomainUserToGQL(createdUser), nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, user gql.UpdateUserInput) (*gql.User, error) {
	if err := validations.ValidateUpdateUserInput(user); err != nil {
		return nil, err
	}

	domainUser := mapper.GQLUpdateUserToDomain(&user)
	updatedUser, err := r.UserService.UpdateUser(ctx, domainUser)
	if err != nil {
		return nil, err
	}
	return mapper.DomainUserToGQL(updatedUser), nil
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*gql.User, error) {
	users, err := r.UserService.GetUsers(ctx)
	if err != nil {
		return nil, err
	}
	return mapper.DomainUsersToGQL(users), nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*gql.User, error) {
	user, err := r.UserService.GetUser(ctx, id)
	if err != nil {
		return nil, err
	}
	return mapper.DomainUserToGQL(user), nil

}

// Mutation returns gql.MutationResolver implementation.
func (r *Resolver) Mutation() gql.MutationResolver { return &mutationResolver{r} }

// Query returns gql.QueryResolver implementation.
func (r *Resolver) Query() gql.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
